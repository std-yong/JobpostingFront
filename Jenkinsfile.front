pipeline {
    agent {
        label 'build_server'
    }
    
    environment {
        gitName = 'std-yong'
        gitEmail = 'std-yong@github.com'
        gitWebaddress = 'https://github.com/std-yong/JobpostingFront.git'
        gitSshaddress = 'git@github.com:std-yong/JobpostingFront.git'
        gitCredential = 'std-yong'
        ECR_Repository_name = 'jinyong'
        ECR_Registry = '236747833953.dkr.ecr.ap-northeast-2.amazonaws.com'
        AWS_REGION = 'ap-northeast-2'
    }
    
    stages {
        stage('Checkout Github') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: gitCredential, url: gitWebaddress]]])
            }
            post {
                failure {
                    echo 'Repository clone failure'
                }
                success {
                    echo 'Repository clone success'
                }
            }
        }
        
        stage('Docker Login to ECR') {
            steps {
                withCredentials([aws(credentialsId: 'aws_cre', region: AWS_REGION)]) {
                    sh "aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_Registry}"
                }
            }
            post {
                failure {
                    echo 'Docker login to ECR failure'
                }
                success {
                    echo 'Docker login to ECR success'                    
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                sh "sudo docker build -t ${ECR_Registry}/${ECR_Repository_name}:${currentBuild.number} ."
                sh "sudo docker build -t ${ECR_Registry}/${ECR_Repository_name}:latest ."
            }
            post {
                failure {
                    echo 'Docker build failure'
                    sh "docker system prune -a --force"
                }
                success {
                    echo 'Docker build success'
                }
            }
        }
        stage('Docker Image Push') {
            steps {
                sh "sudo docker push ${ECR_Registry}/${ECR_Repository_name}:${currentBuild.number}"
                sh "sudo docker push ${ECR_Registry}/${ECR_Repository_name}:latest"
            }
            post {
                failure {
                    echo 'Docker image Push failure'
                    sh "docker image rm -f ${ECR_Registry}/${ECR_Repository_name}:${currentBuild.number}"
                    sh "docker image rm -f ${ECR_Registry}/${ECR_Repository_name}:latest"
                }
                success {
                    echo 'Docker image Push success'
                    sh "docker image rm -f ${ECR_Registry}/${ECR_Repository_name}:${currentBuild.number}"
                    sh "docker image rm -f ${ECR_Registry}/${ECR_Repository_name}:latest"                   
                }
            }
        }

        stage('k8s Manifest File Update') {
            steps {
                git credentialsId: gitCredential,
                url: gitWebaddress,
                branch: 'main'

                sh "git config --global user.email ${gitEmail}"
                sh "git config --global user.name ${gitName}"
                sh "sed -i 's@${ECR_Repository_name}:.*@${ECR_Repository_name}:${currentBuild.number}@g' front-dp.yaml"                
                sh "git add ."
                sh "git commit -m 'fix:${ECR_Repository_name} ${currentBuild.number} image versioning'"
                sh "git branch -M main"
                sh "git remote remove origin"
                sh "git remote add origin ${gitSshaddress}"
                sh "git push -u origin main"
            }
            post {
                failure {
                    echo 'Container Deploy failure'
                }
                success {
                    echo 'Container Deploy success'
                }
            }
        }
        
    }
}



