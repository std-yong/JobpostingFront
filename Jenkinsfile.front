pipeline {
    agent {
        // 해당 노드의 레이블을 지정합니다.
        label 'build_server'
    }
    
    environment {
        gitName = 'std-yong'
        gitEmail = 'std-yong@github.com'
        gitWebaddress = 'https://github.com/std-yong/JobpostingFront.git'
        gitSshaddress = 'git@github.com:std-yong/JobpostingFront.git'
        ECR_Repository_name = 'jinyong'
        ECR_Registry = '236747833953.dkr.ecr.ap-northeast-2.amazonaws.com'
        AWS_REGION = 'ap-northeast-2'
    }
    
    stages {
        stage('Docker Login to ECR') {
            steps {
                withCredentials([aws(credentialsId: 'aws_cre', region: '${AWS_REGION}')]) {
                    sh "aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_Registry}"
                }
            }
            post {
                failure {
                    echo 'Docker login to ECR failure'
                }
                success {
                    echo 'Docker login to ECR success'
                }
            }
        }

        stage('Docker image build') {
            steps {
                sh "sudo docker build -t ${ECR_Registry}/${ECR_Repository_name}:${currentBuild.number} ."
                sh "sudo docker build -t ${ECR_Registry}/${ECR_Repository_name}:latest ."
            }
            post {
                failure {
                    echo 'Docker build failure'
                    // 이미지 생성이 안될때 이유가 디스크 공간 부족인 경우가 가끔 있기 때문에 삭제해줌
                    sh "docker system prune -a --force"
                }
                success {
                    echo 'Docker build success'
                }
            }
        }


        
    }
}
